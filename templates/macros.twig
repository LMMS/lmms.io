{# Prints an FontAwesome icon #}
{% macro icon(icon, brand = false, transform = '') %}
	{# Check if we have a brand icon, different syntax #}
	{% if brand %}
		<span class="fab {{ icon }}" data-fa-transform="{{ transform }}"></span>
	{% else %}
		<span class="fas {{ icon }}" data-fa-transform="{{ transform }}"></span>
	{% endif %}
{% endmacro %}

{# Creates a small Jumbo header #}
{% macro jumbo(title, subtitle) %}
<div class="jumbotron mini">
	<div class="container">
		<h2>{{title}}</h2>
		<h5>{{subtitle}}</h5>
	</div>
</div>
{% endmacro %}

{# Prints an FontAwesome icon stack with two icons and a tooltip #}
{% macro icon_stack(icon1, brand1, icon2, brand2, parentclass, tooltip) %}
	{% import _self as macros %}
	<span class='fa-layers fa-fw {{ parentclass }}' data-toggle='tooltip' data-placement='top' title='{{ tooltip }}'>
		{{ macros.icon(icon1, brand1) }}
		{{ macros.icon(icon2, brand2, "shrink-6") }}
	</span>
{% endmacro %}

{# Prints an icon stack with the lower one being a double sized circle
   and the upper one being inversed #}
{% macro circle_stack(icon, class = '', brand, tooltip = '') %}
	{% import _self as macros %}
	{{ macros.icon_stack('fa-circle', false, "#{icon} fa-inverse", brand, class , tooltip ) }}
{% endmacro %}

{# Prints an icon stack with the lower one being a double square
   and the upper one being inversed #}
{% macro square_stack(icon, class = '', brand, tooltip = '') %}
	{% import _self as macros %}
	{{ macros.icon_stack('fa-square', false, "#{icon} fa-inverse", brand, class , tooltip ) }}
{% endmacro %}

{% macro create_artwork_item(artwork_name, img_path, raw_path, rendered_path, author_name = '', author_link = '', modified_by = '') %}
	{% import _self as macros %}
	<img class="art-thumb" src="{{img_path}}">
	<h3>{{artwork_name}}</h3>
	{% set buttons = [raw_path, rendered_path] %}
	{% if author_name %}
		<p><strong>{% trans %}Author:{% endtrans %} </strong><a href="{{author_link}}">{{author_name}}</a><br>
	{% else %}
		<p>
	{% endif %}
	{% if modified_by %}
		<strong>{% trans %}Modified/Themed By:{% endtrans %} </strong>{{modified_by}}</p>
	{% else %}
		</p>
	{% endif %}
	{% for button in buttons %}
		{% if button %}
			{% set file_name = button|split('/')|last %}
			{% set extension = file_name|split('.')|last %}
			<a target="_blank" class="btn btn-default" href="{{button}}" download>
				<span class="fas fa-image"></span> {{file_name}} <br><small>({{macros.get_file_description(extension)|trim}})</small>
			</a>&nbsp; 
		{% endif %}
	{% endfor %}
	<br><br><hr><br><br>
{% endmacro %}

{% macro get_file_description(extension) %}
	{% set descriptions = {
		'svg' : 'Scalable Vector Format'|trans,
		'png' : 'PNG Format'|trans,
		'xcf' : 'Gimp Image Editor Format'|trans,
		'pdf' : 'Portable Document Format'|trans,
		'psd' : 'Adobe Photoshop Format'|trans,
		'png' : 'PNG Format'|trans,
		'jpg' : 'JPEG Format'|trans,
		'jpeg': 'JPEG Format'|trans,
		'bmp' : 'Bitmap Format'|trans,
		'ico' : 'Windows Icon Format'|trans,
		'icns': 'Apple Icon Format'|trans,
		} 
	%}
	{{descriptions[extension]|default("Unknown File")}}
{% endmacro %}

{% macro print_menu_item(class, text, url, icon = null) %}
	<li class='{{class}}'><a href='{{url}}'>
	{% if icon %}
		<i class='fas {{icon}} fa-fw'></i>
	{% endif %}
	{{text}}
	</a></li>
{% endmacro %}

{% macro create_navbar_menu_item(text, url, children = null, rightAlign = false, active = '') %}
	{% import _self as macros %}
	{% if children is null %}
	{# Simple menu item. If $text is an array, $text[0] is the title displayed
		on big screens, $text[1] is the one displayed on smaller screens #}
		{% if text is iterable %}
			<li class="{{active}} visible-lg"> <a href="{{url}}">{{text[0]}}</a></li>
			<li class="{{active}} hidden-lg"> <a href="{{url}}">{{text[1]}}</a></li>
		{% else %}
			<li class="{{active}}"> <a href="{{url}}">{{text}}</a></li>
		{% endif %}
	{% else %}
	{# Drop-down items #}
		<li tabindex='0' class='dropdown hidden-xs'>
			<a href='#'>{{text}} <span class='caret'></span></a>
			<ul tabindex='0' class='dropdown-menu pull-right'>
				{% for key, child in children %}
					{{macros.print_menu_item('', child[1], child[2], child[0])}}
				{% endfor %}
			</ul>
		</li>
		<li class='{{active}} visible-xs'>
			<a href='#' class='dropdown-toggle' data-toggle='dropdown'>{{text}}&nbsp;<i class='caret'></i></a>
			<ul class="dropdown-menu" role="menu">
				{% for child in children %}
					{{macros.print_menu_item('', child[1], child[2], child[0])}}
				{% endfor %}
			</ul>
		</li>
	{% endif %}
{% endmacro %}

{% macro create_navbar(items, current_uri = '/') %}
	{% import _self as macros %}
	{% for item in items %}
		{% if not item[3] %}
			{% set active = item[1] == current_uri ? 'active' : '' %}
			{{macros.create_navbar_menu_item(item[0], item[1], item[2], false, active)}}
		{% endif %}
	{% endfor %}
	</ul>
	<ul class="nav navbar-nav navbar-right">
	{% for item in items %}
		{% if item[3] %}
			{{macros.create_navbar_menu_item(item[0], item[1], item[2], true)}}
		{% endif %}
	{% endfor %}
{% endmacro %}
